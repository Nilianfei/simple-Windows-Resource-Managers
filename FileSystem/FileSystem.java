/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FileSystem;

import FileSystem.plusfun.MyLRU;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.tree.*;

/**
 *
 * @author Afei
 */
public class FileSystem extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public FileSystem() {
        initComponents();
        mtm.startTable();
        ImageIcon icon=new ImageIcon("image//wjglq.png");
        this.setIconImage(icon.getImage());
        gobackjButton.setEnabled(false);
        pathstack.push("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtablePopupMenu = new javax.swing.JPopupMenu();
        CreateFileMenuItem = new javax.swing.JMenuItem();
        refreshMenuItem = new javax.swing.JMenuItem();
        CreateFolderMenuItem = new javax.swing.JMenuItem();
        DelectFileMenuItem = new javax.swing.JMenuItem();
        AlternameMenuItem = new javax.swing.JMenuItem();
        CopyfileMenuItem = new javax.swing.JMenuItem();
        PastefileMenuItem = new javax.swing.JMenuItem();
        CutfileMenuItem = new javax.swing.JMenuItem();
        jtreePopupMenu = new javax.swing.JPopupMenu();
        trefreshMenuItem = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree(initTree());
        rencentfilejButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFS = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        gojButton = new javax.swing.JButton();
        gobackjButton = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        searchjButton = new javax.swing.JButton();

        CreateFileMenuItem.setText("创建文件");
        CreateFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateFileMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(CreateFileMenuItem);

        refreshMenuItem.setText("刷新");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(refreshMenuItem);

        CreateFolderMenuItem.setText("创建文件夹");
        CreateFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateFolderMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(CreateFolderMenuItem);

        DelectFileMenuItem.setText("删除");
        DelectFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelectFileMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(DelectFileMenuItem);

        AlternameMenuItem.setText("重命名");
        AlternameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlternameMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(AlternameMenuItem);

        CopyfileMenuItem.setText("复制");
        CopyfileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyfileMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(CopyfileMenuItem);

        PastefileMenuItem.setText("粘贴");
        PastefileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PastefileMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(PastefileMenuItem);
        PastefileMenuItem.setEnabled(false);

        CutfileMenuItem.setText("剪切");
        CutfileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutfileMenuItemActionPerformed(evt);
            }
        });
        jtablePopupMenu.add(CutfileMenuItem);

        trefreshMenuItem.setText("刷新");
        trefreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trefreshMenuItemActionPerformed(evt);
            }
        });
        jtreePopupMenu.add(trefreshMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jSplitPane1.setDividerSize(2);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jSplitPane1ComponentResized(evt);
            }
        });

        jSplitPane2.setDividerSize(0);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setContinuousLayout(false);

        jTree.setToolTipText("");
        jTree.setCellRenderer(new DefaultTreeCellRenderer(){
            public Component getTreeCellRendererComponent(JTree tree,Object value,boolean selected,boolean expanded,
                boolean leaf, int row,boolean hasFocus){
                super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
                DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
                setIcon(new javax.swing.ImageIcon("image\\folder.png"));
                if(node.equals(tree.getModel().getRoot()))
                setIcon(new javax.swing.ImageIcon("image\\computer.png"));
                if(node.getParent()!=null){
                    if(node.getParent().equals(tree.getModel().getRoot()))
                    setIcon(new javax.swing.ImageIcon("image\\drive.png"));
                }
                return this;
            }
        });
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });
        jTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jTreeTreeWillExpand(evt);
            }
        });
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        jSplitPane2.setRightComponent(jScrollPane1);

        rencentfilejButton.setText("最近访问的位置");
        rencentfilejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rencentfilejButtonActionPerformed(evt);
            }
        });
        jSplitPane2.setLeftComponent(rencentfilejButton);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane2ComponentResized(evt);
            }
        });

        jTableFS.setModel(FileSystem.mtm
        );
        jTableFS.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTableFSMouseMoved(evt);
            }
        });
        jTableFS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFSMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableFS);
        jTableFS.getColumnModel().getColumn(0).setCellRenderer(new TableRenderFS());
        jTableFS.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTableFS.getColumnModel().getColumn(0).setPreferredWidth(10);

        jSplitPane1.setRightComponent(jScrollPane2);

        jTextField1.setText("");
        /*jTextField1.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void removeUpdate(DocumentEvent e) {
                System.out.println(1);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                System.out.println(2);
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                System.out.println(3);
                pathstack.push(jTextField1.getText());
            }
        });*/

        gojButton.setText("go");
        gojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gojButtonActionPerformed(evt);
            }
        });

        gobackjButton.setText("返回");
        gobackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gobackjButtonActionPerformed(evt);
            }
        });

        searchjButton.setText("搜索");
        searchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gojButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gobackjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gojButton)
                    .addComponent(gobackjButton)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode father=(DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
        GetJustCurrentDir.paintCurrentDir(father);
        String path=mtm.paintCurrentFiles(father);
        jTextField1.setText(path);
        pathstack.push(path);
        gobackjButton.setEnabled(true);
        if(!path.equals(""))
            myLRU.add(path);
        mtm.fireTableDataChanged();
    }//GEN-LAST:event_jTreeValueChanged

    
    private void jTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jTreeTreeWillExpand
        // TODO add your handling code here:
        TreePath path=evt.getPath();
        DefaultMutableTreeNode node=(DefaultMutableTreeNode) path.getLastPathComponent();
        GetJustCurrentDir.paintCurrentDir(node);
    }//GEN-LAST:event_jTreeTreeWillExpand

    private void jSplitPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSplitPane1ComponentResized
        // TODO add your handling code here:
        jSplitPane1.setDividerLocation(0.3);
    }//GEN-LAST:event_jSplitPane1ComponentResized

    private void gojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gojButtonActionPerformed
        // TODO add your handling code here:
        String path=jTextField1.getText();
        if(mtm.gotoCurrentDir(path)){
            pathstack.push(path);
            gobackjButton.setEnabled(true);
            if(!path.equals("")&&!path.contains("|")&&!path.equals("最近访问的位置"))
                myLRU.add(path);
            mtm.fireTableDataChanged();
        }
        else
            JOptionPane.showMessageDialog(null,"找不到  \""+path+"\"  请检查你的路径名.");
    }//GEN-LAST:event_gojButtonActionPerformed

    private void jTableFSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFSMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==1){
            row=((JTable)evt.getSource()).rowAtPoint(evt.getPoint());
            column=((JTable)evt.getSource()).columnAtPoint(evt.getPoint());
            isClick=true;
        }
        if(evt.getClickCount()==2){
            row=((JTable)evt.getSource()).rowAtPoint(evt.getPoint());
            column=((JTable)evt.getSource()).columnAtPoint(evt.getPoint());
            String filename=(String)(jTableFS.getValueAt(row,1));
            String filetype;
            String filepath="";
            if(jTextField1.getText().contains("|")||jTextField1.getText().equals("最近访问的位置")){
                filepath=(String)(jTableFS.getValueAt(row, 2));
                if(filepath.equals("客官，这里没有您想要的菜"))return;
                File file=new File(filepath);
                if(!file.isDirectory())filetype="文件";
                else filetype="文件夹";
            }
            else{
                filetype=(String)(jTableFS.getValueAt(row,2));
                if(filetype.equals("存储器")){
                    filepath=filename;
                }
                else {
                    filepath=jTextField1.getText()+"\\"+filename;
                }
            }
            myLRU.add(filepath);
            if(filetype.equals("文件夹")||filetype.equals("存储器")){
                jTextField1.setText(filepath);
                pathstack.push(filepath);
                gobackjButton.setEnabled(true);
                if(mtm.gotoCurrentDir(filepath))
                    mtm.fireTableDataChanged();
            }
            else{
                int flag=0;
                if(filepath.length()>1)
                    flag=CLfileoperate.INSTANCE.openFile(filepath);
                if(flag==0)JOptionPane.showMessageDialog(null,"不能打开 \""+filename+"\" 文件");
            }
        }
        if(evt.getButton()==java.awt.event.MouseEvent.BUTTON3){
            row=((JTable)evt.getSource()).rowAtPoint(evt.getPoint());
            column=((JTable)evt.getSource()).columnAtPoint(evt.getPoint());
            jTableFS.setRowSelectionInterval(row, row);
            if(jTextField1.getText().contains("|")||jTextField1.getText().equals("")||jTextField1.getText().equals("最近访问的位置"))return;
            jtablePopupMenu.show(jTableFS, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTableFSMouseClicked

    private void jTableFSMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFSMouseMoved
        // TODO add your handling code here:
        mmrow=((JTable)evt.getSource()).rowAtPoint(evt.getPoint());
        //mmcolumn=((JTable)evt.getSource()).columnAtPoint(evt.getPoint());
        //jTable1.repaint();
    }//GEN-LAST:event_jTableFSMouseMoved

    private void jScrollPane2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane2ComponentResized
        // TODO add your handling code here:
        int x=jScrollPane2.getWidth();
        int columnCount=jTableFS.getColumnCount();
        int width=(x-10)/(columnCount-1);
        for(int i=1;i<columnCount;i++){
            jTableFS.getColumnModel().getColumn(i).setPreferredWidth(width);
        }
    }//GEN-LAST:event_jScrollPane2ComponentResized

    private void gobackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gobackjButtonActionPerformed
        // TODO add your handling code here:
        if(pathstack.empty()){
            gobackjButton.setEnabled(false);
            System.out.println("stack is empty");
            return;
        }
        String newpath=pathstack.pop();
        if(newpath.equals(jTextField1.getText())){
            if(pathstack.empty()){gobackjButton.setEnabled(false);return;}
            newpath=pathstack.pop();
        }
        jTextField1.setText(newpath);
        pathstack.push(newpath);
        gobackjButton.setEnabled(true);
        if(mtm.gotoCurrentDir(newpath))mtm.fireTableDataChanged();
    }//GEN-LAST:event_gobackjButtonActionPerformed

    private void CreateFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFileMenuItemActionPerformed
        // TODO add your handling code here:
        String path=jTextField1.getText();
        String newfilename=JOptionPane.showInputDialog("请输入文件名");
        if(newfilename==null||newfilename.isEmpty()){JOptionPane.showMessageDialog(null,"文件名不能为空");return;}
        if(isSameName.INSTANCE.isSamefileName(newfilename, path)==1){
            JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+newfilename+"\" 的文件夹。");
            return;
        }
        if(newfilename.equals(""))return;
        if(newfilename.contains("|")||newfilename.contains("\\")||
            newfilename.contains("/")||newfilename.contains(":")||newfilename.contains("*")
            ||newfilename.contains("?")||newfilename.contains("<")||newfilename.contains(">")
            ||newfilename.contains("\""))
        {
            JOptionPane.showMessageDialog(null,"创建文件夹不能含\"|、\\、/、:、*、?、<、\"、>\"");
            return;
        }
        String filepath=path+"\\"+newfilename;
        int flag=CLfileoperate.INSTANCE.createFile(filepath);
        if(flag==1){
                if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
        }
        else{
            JOptionPane.showMessageDialog(null,"创建 \""+newfilename+"\" 文件失败");
        }
    }//GEN-LAST:event_CreateFileMenuItemActionPerformed

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
        // TODO add your handling code here:
        String path=jTextField1.getText();
        if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
    }//GEN-LAST:event_refreshMenuItemActionPerformed

    private void CreateFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFolderMenuItemActionPerformed
        // TODO add your handling code here:
        String path=jTextField1.getText();
        String newfoldername=JOptionPane.showInputDialog("请输入文件夹名");
        if(newfoldername==null||newfoldername.isEmpty()){JOptionPane.showMessageDialog(null,"文件夹名不能为空");return;}
        if(isSameName.INSTANCE.isSamefolderName(newfoldername, path)==1){
            JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+newfoldername+"\" 的文件夹。");
            return;
        }
        if(newfoldername.equals(""))return;
        if(newfoldername.contains("|")||newfoldername.contains("\\")||
            newfoldername.contains("/")||newfoldername.contains(":")||newfoldername.contains("*")
            ||newfoldername.contains("?")||newfoldername.contains("<")||newfoldername.contains(">")
            ||newfoldername.contains("\""))
        {
            JOptionPane.showMessageDialog(null,"创建文件夹不能含'|、\\、/、:、*、?、<、\"、>'");
            return;
        }
        String filepath=path+"\\"+newfoldername;
        if(CLfileoperate.INSTANCE.createFolder(filepath)==0){JOptionPane.showMessageDialog(null,"创建文件夹出错");return;}
        if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
        DefaultMutableTreeNode father=FindTreeNodeinPath(path);
        if(father==null){System.out.println("find tree node error");return;}
        DefaultMutableTreeNode son=new DefaultMutableTreeNode(newfoldername);
        father.add(son);
        jTree.updateUI();
    }//GEN-LAST:event_CreateFolderMenuItemActionPerformed

    private void DelectFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelectFileMenuItemActionPerformed
        // TODO add your handling code here:
        String filename=(String)(jTableFS.getValueAt(row,1));
        String filetype=(String)(jTableFS.getValueAt(row,2));
        String path=jTextField1.getText();
        String filepath=path+"\\"+filename;
        int t=JOptionPane.showConfirmDialog(null, "你确定要彻底删除 \""+filename+"\" 吗?","",YES_NO_OPTION);
        if(t==0){
            if(!filetype.equals("文件夹")){
                int flag=CLfileoperate.INSTANCE.deleteFile(filepath);
                if(flag==0){
                    JOptionPane.showMessageDialog(null,"删除文件 \""+filename+"\" 失败");
                    return;
                }
            }
            if(filetype.equals("文件夹")){
                if(CLfileoperate.INSTANCE.deleteFolder(filepath)==0){
                    JOptionPane.showMessageDialog(null,"删除文件夹 \""+filename+"\" 失败");
                    return;
                }
                DefaultMutableTreeNode delNode=FindTreeNodeinPath(filepath);
                if(delNode==null){System.out.println("find tree node error");return;}
                delNode.removeFromParent();
                jTree.updateUI();
            }
            if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
        }
    }//GEN-LAST:event_DelectFileMenuItemActionPerformed

    private void AlternameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlternameMenuItemActionPerformed
        // TODO add your handling code here:
        String filename=(String)(jTableFS.getValueAt(row,1));
        String filetype=(String)(jTableFS.getValueAt(row,2));
        String path=jTextField1.getText();
        String newfilename=JOptionPane.showInputDialog("请输入文件名");
        if(newfilename==null||newfilename.isEmpty()){JOptionPane.showMessageDialog(null,"名字不能为空");return;}
        if(filetype.equals("文件夹"))
        {
            if(isSameName.INSTANCE.isSamefolderName(newfilename, path)==1){
                JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+newfilename+"\" 的文件夹。");
                return;
            }
        }
        else if(isSameName.INSTANCE.isSamefileName(newfilename, path)==1){
            JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+newfilename+"\" 的文件。");
            return;
        }
        if(CLfileoperate.INSTANCE.alterFileName(path, filename, newfilename)==0){
            JOptionPane.showMessageDialog(null,"重命名文件 \""+filename+"\" 失败");
            return;
        }
        if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
        if(filetype.equals("文件夹")){
            String filepath=path+"\\"+filename;
            DefaultMutableTreeNode alterNameNode=FindTreeNodeinPath(filepath);
            if(alterNameNode==null){System.out.println("error");return;}
            alterNameNode.setUserObject(newfilename);
            jTree.updateUI();
        }
    }//GEN-LAST:event_AlternameMenuItemActionPerformed

    private void CopyfileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyfileMenuItemActionPerformed
        // TODO add your handling code here:
        CopyandPastefilename=(String)(jTableFS.getValueAt(row,1));
        CopyandPastefiletype=(String)(jTableFS.getValueAt(row,2));
        CopyandPastefilepath=jTextField1.getText();
        PastefileMenuItem.setEnabled(true);
    }//GEN-LAST:event_CopyfileMenuItemActionPerformed

    private void PastefileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PastefileMenuItemActionPerformed
        // TODO add your handling code here:
        String path=jTextField1.getText();
        String spath=CopyandPastefilepath+"\\"+CopyandPastefilename;
        String dpath=path+"\\"+CopyandPastefilename;
        if(CopyandPastefiletype.equals("文件夹")){
            if(isSameName.INSTANCE.isSamefolderName(CopyandPastefilename, CopyandPastefilepath)==0){
                JOptionPane.showMessageDialog(null,"找不到目标 \""+spath+"\"");
                PastefileMenuItem.setEnabled(false);
                return;
            }
        }
        else if(isSameName.INSTANCE.isSamefileName(CopyandPastefilename, CopyandPastefilepath)==0){
            JOptionPane.showMessageDialog(null,"找不到目标 \""+spath+"\"");
            PastefileMenuItem.setEnabled(false);
            return;
        }
        if(CopyandPastefiletype.equals("文件夹")){
            if(isSameName.INSTANCE.isSamefolderName(CopyandPastefilename, path)==1){
                JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+CopyandPastefilename+"\" 的文件夹。");
                return;
            }
        }
        else if(isSameName.INSTANCE.isSamefileName(CopyandPastefilename, path)==1){
            JOptionPane.showMessageDialog(null,"此目标已包含名为 \""+CopyandPastefilename+"\" 的文件。");
            return;
        }
        if(!CopyandPastefiletype.equals("文件夹")){
        if(CLfileoperate.INSTANCE.copyFile(spath, dpath)==0){System.out.println("paste file error");return;}
        }
        if(CopyandPastefiletype.equals("文件夹")){
            if(CLfileoperate.INSTANCE.copyFolder(spath, path)==0){System.out.println("paste folder error");return;}
            DefaultMutableTreeNode father=FindTreeNodeinPath(path);
            if(father==null){System.out.println("find tree node error");}
            else{
                DefaultMutableTreeNode son=new DefaultMutableTreeNode(CopyandPastefilename);
                String isChild=GetJustCurrentDir.getJustCurrentDir.INSTANCE.getJustCurrentDir(dpath);
                if(!isChild.equals("0")){
                DefaultMutableTreeNode node=new DefaultMutableTreeNode();
                son.add(node);
                }
                father.add(son);
                jTree.updateUI();
            }
        }
        if(isCutfile){
            isCutfile=false;
            if(!CopyandPastefiletype.equals("文件夹")){
            if(CLfileoperate.INSTANCE.deleteFile(spath)==0){System.out.println("delete file error");return;}
            }
            if(CopyandPastefiletype.equals("文件夹")){
                if(CLfileoperate.INSTANCE.deleteFolder(spath)==0){System.out.println("delete folder error");return;}
                DefaultMutableTreeNode father=FindTreeNodeinPath(spath);
                if(father==null){System.out.println("find tree node error");}
                else{
                    father.removeFromParent();
                    jTree.updateUI();
                }
            }
        }
        PastefileMenuItem.setEnabled(false);
        if(mtm.gotoCurrentDir(path))mtm.fireTableDataChanged();
    }//GEN-LAST:event_PastefileMenuItemActionPerformed

    private void CutfileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutfileMenuItemActionPerformed
        // TODO add your handling code here:
        CopyandPastefilename=(String)(jTableFS.getValueAt(row,1));
        CopyandPastefiletype=(String)(jTableFS.getValueAt(row,2));
        CopyandPastefilepath=jTextField1.getText();
        PastefileMenuItem.setEnabled(true);
        isCutfile=true;
    }//GEN-LAST:event_CutfileMenuItemActionPerformed

    private void trefreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trefreshMenuItemActionPerformed
        // TODO add your handling code here:
        int driveCode=getLogicalDrive.INSTANCE.getLogicalDrive();
        String bin=Integer.toBinaryString(driveCode);
        int size=bin.length();
        int dn='A';
        String[] bin1=bin.split("");
        DefaultMutableTreeNode root=(DefaultMutableTreeNode)jTree.getModel().getRoot();  
        int childcount=root.getChildCount();
        for(int i=size-1;i>=0;i--)
        {
            if("1".equals(bin1[i])){
                boolean flag=false;
                for(int j=0;j<childcount;j++)
                {
                    if(((char)dn+":").equals(root.getChildAt(j).toString())){
                     flag=true;
                     break;
                    }
                }
                if(flag==false){
                    DefaultMutableTreeNode node=new DefaultMutableTreeNode((char)dn+":");
                    DefaultMutableTreeNode nothing=new DefaultMutableTreeNode(null);
                    node.add(nothing);                       
                    root.add(node);
                }
            }
            dn=dn+1;
        }
        for(int i=0;i<childcount;i++)
        {
            dn='A';
            boolean flag=false;
            for(int j=size-1;j>=0;j--)
            {
                if("1".equals(bin1[j])){
                    if(((char)dn+":").equals(root.getChildAt(i).toString())){
                     flag=true;
                     break;
                    }
                }
                dn=dn+1;
            }
            if(flag==false){
                DefaultMutableTreeNode node=(DefaultMutableTreeNode)root.getChildAt(i);
                node.removeFromParent();
            }
        }
        jTree.updateUI();
    }//GEN-LAST:event_trefreshMenuItemActionPerformed

    private void jTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMousePressed
        // TODO add your handling code here:
        if(evt.getButton()==3){
            jtreePopupMenu.show(jTree, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTreeMousePressed

    private void searchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchjButtonActionPerformed
        // TODO add your handling code here:
        String searchPath=jTextField1.getText();
        if(searchPath.contains("|")||searchPath.equals("最近访问的位置")||searchPath.equals("")){JOptionPane.showMessageDialog(null,"现在不能搜索");return;}
        String searchFileName=jTextField2.getText();
        if(searchFileName==null||searchFileName.isEmpty()){JOptionPane.showMessageDialog(null,"请输入搜索目标名称");return;}
        if(searchFileName.length()<2)searchFileName=searchFileName+" ";
        jTextField1.setText(searchFileName+"|"+searchPath);
        pathstack.push(searchFileName+"|"+searchPath);
        gobackjButton.setEnabled(true);
        jTableFS.getColumnModel().getColumn(2).setHeaderValue("路径");
        if(mtm.searchTable(searchFileName,searchPath))
            mtm.fireTableDataChanged();
        else JOptionPane.showMessageDialog(null,"搜索出错");
    }//GEN-LAST:event_searchjButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        SourceSystem.SourceSystem.startFS.setEnabled(true);
        try {
            myLRU.writePath();
        } catch (IOException ex) {
            Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    private void rencentfilejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rencentfilejButtonActionPerformed
        try {
            // TODO add your handling code here:
            myLRU.writePath();
                } catch (IOException ex) {
            Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(mtm.rencentfileTable(LrufileName)){jTableFS.getColumnModel().getColumn(2).setHeaderValue("路径");mtm.fireTableDataChanged();}
        else JOptionPane.showMessageDialog(null,"获取\"最近访问的位置\"出错");
        jTextField1.setText("最近访问的位置");
        pathstack.push("最近访问的位置");
        gobackjButton.setEnabled(true);
    }//GEN-LAST:event_rencentfilejButtonActionPerformed
    private static DefaultMutableTreeNode FindTreeNodeinPath(String path)
    {
        String[] foldernames=null;
        if(path.contains("\\")){
            path=path.replace('\\', '|');
            foldernames=path.split("\\|");
        }
        else {
            foldernames=new String[1];
            foldernames[0]=path;
        }
        DefaultMutableTreeNode TargetNode=(DefaultMutableTreeNode)jTree.getModel().getRoot();
        for(int i=0;i<foldernames.length;i++)
        {
            int j=0;
            boolean flag=false;
            int childcount=TargetNode.getChildCount();
            for(j=0;j<childcount;j++)
            {
                if(TargetNode.getChildAt(j).toString().equals(foldernames[i]))
                {
                    TargetNode=(DefaultMutableTreeNode)TargetNode.getChildAt(j);
                    flag=true;
                    break;
                }
            }
            if(flag==false)return null;
        }
        return TargetNode;
    }
    private static DefaultMutableTreeNode initTree()
    {
        
        int driveCode=getLogicalDrive.INSTANCE.getLogicalDrive();
        String bin=Integer.toBinaryString(driveCode);
        //System.out.println(bin);
        int size=bin.length();
        int dn='A';
        String[] bin1=bin.split("");
        DefaultMutableTreeNode root=new DefaultMutableTreeNode("计算机");   
        
        for(int i=size-1;i>=0;i--)
        {
            if("1".equals(bin1[i])){
                DefaultMutableTreeNode node=new DefaultMutableTreeNode((char)dn+":");
                DefaultMutableTreeNode nothing=new DefaultMutableTreeNode(null);
                node.add(nothing);                       
                root.add(node);
            }
            dn=dn+1;
        }
        return root;
    }

   
    
    /**
     * @param args the command line arguments
     */
    public static void startFileSystem() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FileSystem FS=new FileSystem();
                FS.setTitle("文件管理器");
                FS.setLocation(300, 300);
                FS.setVisible(true);
                jSplitPane1.setDividerLocation(0.3);
                try {
                    myLRU=new MyLRU(LrufileName);
                } catch (IOException ex) {
                    Logger.getLogger(FileSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    final static String LrufileName = "rencentLru.txt";
    private static MyLRU myLRU; 
    public static int row=0,column=0;
    public static int mmrow=0;
    public static boolean isClick=false;
    public static MyTableModelFS mtm=new MyTableModelFS();
    private Stack<String> pathstack=new Stack();
    private String CopyandPastefilename,CopyandPastefiletype,CopyandPastefilepath;
    private boolean isCutfile=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AlternameMenuItem;
    private javax.swing.JMenuItem CopyfileMenuItem;
    private javax.swing.JMenuItem CreateFileMenuItem;
    private javax.swing.JMenuItem CreateFolderMenuItem;
    private javax.swing.JMenuItem CutfileMenuItem;
    private javax.swing.JMenuItem DelectFileMenuItem;
    private javax.swing.JMenuItem PastefileMenuItem;
    private javax.swing.JButton gobackjButton;
    private javax.swing.JButton gojButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    public static javax.swing.JTable jTableFS;
    private static javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    public static javax.swing.JTree jTree;
    private javax.swing.JPopupMenu jtablePopupMenu;
    private javax.swing.JPopupMenu jtreePopupMenu;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JButton rencentfilejButton;
    private javax.swing.JButton searchjButton;
    private javax.swing.JMenuItem trefreshMenuItem;
    // End of variables declaration//GEN-END:variables
}
